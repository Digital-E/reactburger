{"version":3,"sources":["components/index.js","components/burger.js","components/topbun.js","components/vegetables.js","components/cheese.js","components/patty.js","components/bottombun.js","App.js","serviceWorker.js","index.js"],"names":["Components","burger","props","className","content","body","map","blok","TopBun","styles","fill","TopBunColour","style","dangerouslySetInnerHTML","__html","Vegetables","vegetablesRef","useRef","useEffect","setTimeout","window","Flickity","current","cellAlign","contain","pageDots","prevNextButtons","wrapAround","ref","vegetables","image","index","key","src","filename","Cheese","cheeseSlice","useState","cheeseSlices","setCheeseSlices","cheese","onClick","Patty","BottomBun","BottomBunColour","component","React","createElement","_uid","QUERY_STORYBLOK","gql","App","data","useQuery","undefined","BurgerItem","Boolean","location","hostname","match","client","ApolloClient","uri","request","operation","setContext","headers","token","process","version","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RAQMA,EAAa,CACjBC,OCNa,SAAAC,GACb,OACE,yBAAKC,UAAU,gBACZD,EAAME,QAAQC,KAAKC,KAAI,SAAAC,GAAI,OAAIP,EAAWO,QDI/CC,OERa,SAAAN,GACb,IAAIO,EAAS,CACXC,KAAMR,EAAME,QAAQO,cAGtB,OACE,yBAAKR,UAAU,WACb,yBAAKA,UAAU,sBACb,yBACES,MAAOH,EACPI,wBAAyB,CAAEC,OAAQZ,EAAME,QAAQI,aFDzDO,WGTa,SAAAb,GACb,IAAIc,EAAgBC,mBAgBpB,OAfAC,qBAAU,WAGRC,YAAW,WACG,IAAIC,OAAOC,SAASL,EAAcM,QAAS,CAErDC,UAAW,OACXC,SAAS,EACTC,UAAU,EACVC,iBAAiB,EACjBC,YAAY,MAEb,OACF,IAGD,yBAAKxB,UAAU,cACb,yBAAKA,UAAU,sCAAsCyB,IAAKZ,GACvDd,EAAME,QAAQyB,WAAWvB,KAAI,SAACwB,EAAOC,GAAR,OAC5B,yBAAKC,IAAKD,EAAO5B,UAAU,gBAAgB8B,IAAKH,EAAMI,iBHX9DC,OIVa,SAAAjC,GACb,IAAIkC,EAAclC,EAAME,QAAQ+B,OADV,EAEkBE,mBAAS,CAACD,IAF5B,mBAEfE,EAFe,KAEDC,EAFC,KAQtB,OAAOD,EAAahC,KAAI,SAAAkC,GAAM,OAC5B,yBAAKrC,UAAU,UACb,yBAAKA,UAAU,qBACb,yBACE8B,IAAKO,EACLC,QAAS,WARfF,EAAgB,GAAD,mBAAKD,GAAL,CAAmBF,cJMpCM,MKXa,SAAAxC,GACb,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,oBACb,yBAAK8B,IAAK/B,EAAME,QAAQsC,WLQ9BC,UMZa,SAAAzC,GACb,OACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,yBACb,yBACES,MAAO,CAAEF,KAAMR,EAAME,QAAQwC,iBAC7B/B,wBAAyB,CAAEC,OAAQZ,EAAME,QAAQuC,iBNmC5C,WAAApC,GAEb,MAA0C,qBAA/BP,EAAWO,EAAKsC,WAClBC,IAAMC,cAAc/C,EAAWO,EAAKsC,WAAY,CACrDb,IAAKzB,EAAKyC,KACV5C,QAASG,IAKNuC,IAAMC,eACX,kBAAM,8CAAoBxC,EAAKsC,UAAzB,gCACN,CAAEb,IAAKzB,EAAKyC,Q,uNO/ChB,IAAMC,EAAkBC,YAAH,KAsBNC,MARf,WAAgB,IACNC,EAASC,YAASJ,GAAlBG,KAER,YAAaE,IAATF,EAA2B,uBAAGjD,UAAU,WAAb,cAExB,yBAAKA,UAAU,OAAOH,EAAWoD,EAAKG,WAAWnD,WCftCoD,QACW,cAA7BpC,OAAOqC,SAASC,UAEe,UAA7BtC,OAAOqC,SAASC,UAEhBtC,OAAOqC,SAASC,SAASC,MACvB,2D,WCTAC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,oCACLC,QAAS,SAAAC,GACPA,EAAUC,WAAW,CACnBC,QAAS,CACPC,MAAOC,2BACPC,QAAS,cAMjBC,IAASC,OACP,kBAAC,IAAD,CAAgBX,OAAQA,GACtB,kBAAC,EAAD,OAEFY,SAASC,eAAe,SD0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d4369ef6.chunk.js","sourcesContent":["import React from \"react\";\nimport Burger from \"./burger\";\nimport TopBun from \"./topbun\";\nimport Vegetables from \"./vegetables\";\nimport Cheese from \"./cheese\";\nimport Patty from \"./patty\";\nimport BottomBun from \"./bottombun\";\n\nconst Components = {\n  burger: Burger,\n  TopBun: TopBun,\n  Vegetables: Vegetables,\n  Cheese: Cheese,\n  Patty: Patty,\n  BottomBun: BottomBun\n};\n\n// // Alternative\n// let renderComponent = (type, key, content) => {\n//   switch (type) {\n//     case \"burger\":\n//       return <Burger key={key} content={content} />;\n//       break;\n//     case \"TopBun\":\n//       return <TopBun key={key} content={content} />;\n//       break;\n//     case \"Vegetables\":\n//       return <Vegetables key={key} content={content} />;\n//       break;\n//     case \"Cheese\":\n//       return <Cheese key={key} content={content} />;\n//       break;\n//     case \"Patty\":\n//       return <Patty key={key} content={content} />;\n//       break;\n//     case \"BottomBun\":\n//       return <BottomBun key={key} content={content} />;\n//       break;\n//     default:\n//       return null;\n//   }\n// };\n\nexport default blok => {\n  // console.log(blok);\n  if (typeof Components[blok.component] !== \"undefined\") {\n    return React.createElement(Components[blok.component], {\n      key: blok._uid,\n      content: blok\n    });\n  }\n  // //Alternative\n  // return renderComponent(blok.component, blok._uid, blok);\n  return React.createElement(\n    () => <div>The component {blok.component} has not been created yet.</div>,\n    { key: blok._uid }\n  );\n};\n","import Components from \"./index\";\nimport React from \"react\";\n\nexport default props => {\n  return (\n    <div className=\"react-burger\">\n      {props.content.body.map(blok => Components(blok))}\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default props => {\n  let styles = {\n    fill: props.content.TopBunColour\n  };\n\n  return (\n    <div className=\"top-bun\">\n      <div className=\"top-bun__container\">\n        <div\n          style={styles}\n          dangerouslySetInnerHTML={{ __html: props.content.TopBun }}\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef } from \"react\";\n\nexport default props => {\n  let vegetablesRef = useRef();\n  useEffect(() => {\n    var elem = vegetablesRef;\n\n    setTimeout(() => {\n      var flkty = new window.Flickity(vegetablesRef.current, {\n        // options\n        cellAlign: \"left\",\n        contain: true,\n        pageDots: false,\n        prevNextButtons: false,\n        wrapAround: true\n      });\n    }, 100);\n  }, []);\n\n  return (\n    <div className=\"vegetables\">\n      <div className=\"vegetables__container main-carousel\" ref={vegetablesRef}>\n        {props.content.vegetables.map((image, index) => (\n          <img key={index} className=\"carousel-cell\" src={image.filename} />\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\n\nexport default props => {\n  let cheeseSlice = props.content.Cheese;\n  const [cheeseSlices, setCheeseSlices] = useState([cheeseSlice]);\n\n  const addSlice = () => {\n    setCheeseSlices([...cheeseSlices, cheeseSlice]);\n  };\n\n  return cheeseSlices.map(cheese => (\n    <div className=\"cheese\">\n      <div className=\"cheese__container\">\n        <img\n          src={cheese}\n          onClick={() => {\n            addSlice();\n          }}\n        />\n      </div>\n    </div>\n  ));\n};\n","import React from \"react\";\n\nexport default props => {\n  return (\n    <div className=\"patty\">\n      <div className=\"patty__container\">\n        <img src={props.content.Patty} />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default props => {\n  return (\n    <div className=\"bottom-bun\">\n      <div className=\"bottom-bun__container\">\n        <div\n          style={{ fill: props.content.BottomBunColour }}\n          dangerouslySetInnerHTML={{ __html: props.content.BottomBun }}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\nimport Components from \"./components\";\n\nconst QUERY_STORYBLOK = gql`\n  {\n    BurgerItem(id: \"burger\") {\n      id\n      slug\n      content {\n        _uid\n        component\n        body\n      }\n    }\n  }\n`;\n\nfunction App() {\n  const { data } = useQuery(QUERY_STORYBLOK);\n\n  if (data === undefined) return <p className=\"loading\">loading...</p>;\n\n  return <div className=\"App\">{Components(data.BurgerItem.content)}</div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\nconst client = new ApolloClient({\n  uri: \"https://gapi.storyblok.com/v1/api\",\n  request: operation => {\n    operation.setContext({\n      headers: {\n        token: process.env.REACT_APP_STORKYBLOK_API_KEY,\n        version: \"draft\"\n      }\n    });\n  }\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}